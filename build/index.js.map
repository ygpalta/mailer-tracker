{"version":3,"file":"index.js","mappings":"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","sources":["webpack://mailer-backend/./src/app.js","webpack://mailer-backend/./src/middleware/upload.js","webpack://mailer-backend/./src/models/sentMails.model.js","webpack://mailer-backend/./src/models/sentMails.mongo.js","webpack://mailer-backend/./src/models/settings.model.js","webpack://mailer-backend/./src/models/settings.mongo.js","webpack://mailer-backend/./src/routes/admin.router.js","webpack://mailer-backend/./src/routes/api.router.js","webpack://mailer-backend/./src/routes/landingPage/landingPage.controller.js","webpack://mailer-backend/./src/routes/landingPage/landingPage.router.js","webpack://mailer-backend/./src/routes/sentMails/sentMails.controller.js","webpack://mailer-backend/./src/routes/sentMails/sentMails.router.js","webpack://mailer-backend/./src/routes/settings/settings.controller.js","webpack://mailer-backend/./src/routes/settings/settings.router.js","webpack://mailer-backend/./src/services/mongo.js","webpack://mailer-backend/./src/services/smtpserver.js","webpack://mailer-backend/external commonjs \"cors\"","webpack://mailer-backend/external commonjs \"csv-parse\"","webpack://mailer-backend/external commonjs \"dotenv\"","webpack://mailer-backend/external commonjs \"express\"","webpack://mailer-backend/external commonjs \"mongoose\"","webpack://mailer-backend/external commonjs \"morgan\"","webpack://mailer-backend/external commonjs \"multer\"","webpack://mailer-backend/external commonjs \"nodemailer\"","webpack://mailer-backend/external commonjs \"uuid\"","webpack://mailer-backend/external node-commonjs \"fs\"","webpack://mailer-backend/external node-commonjs \"http\"","webpack://mailer-backend/external node-commonjs \"path\"","webpack://mailer-backend/external node-commonjs \"util\"","webpack://mailer-backend/webpack/bootstrap","webpack://mailer-backend/./src/server.js"],"sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst morgan = require('morgan');\r\nconst path = require('path');\r\n\r\nconst adminRouter = require('./routes/admin.router');\r\nconst apiRouter = require('./routes/api.router');\r\nconst settingsRouter = require('./routes/settings/settings.router');\r\nconst app = express();\r\n\r\n/*app.use(morgan());*/\r\napp.use(cors())\r\n/*app.use(express.json({ extended: false }));*/\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(express.static(path.join(__dirname, \"..\", 'public')));\r\n\r\napp.use('/api', apiRouter);\r\n\r\napp.get('/*', (req, res) => {\r\n    res.sendFile(path.join(__dirname, \"..\", 'public','index.html'))\r\n})\r\n\r\n\r\nmodule.exports = app;","const util = require(\"util\");\nconst multer = require(\"multer\");\nconst maxSize = 2 * 1024 * 1024;\nconst { v4: uuidv4 } = require('uuid');\nlet path = require('path');\n\nlet storage = multer.diskStorage({\n    destination: (req, file, cb) => {\n        cb(null, __basedir + \"/assets/uploads\");\n    },\n    filename: (req, file, cb) => {\n        console.log(file.originalname);\n        cb(null, file.originalname + '-' + uuidv4() + '-' + Date.now() + path.extname(file.originalname));\n    },\n});\n\nlet uploadAttachment = multer({\n    storage: storage,\n}).single(\"attachment\");\n\nlet uploadFiles = multer({\n    storage: storage,\n})\n.fields(\n    [\n        {\n            name: 'attachment',\n            maxCount: 1\n        },\n        {\n            name: 'csv', maxCount: 1\n        }\n    ]\n);\n\n\nlet uploadAttachmentMiddleware = util.promisify(uploadAttachment);\nlet uploadFilesMiddleware = util.promisify(uploadFiles);\nmodule.exports = {\n    uploadAttachmentMiddleware,\n    uploadFilesMiddleware\n}\n\n\n","const sentMails = require(\"./sentMails.mongo\");\r\n\r\nasync function getAllMails() {\r\n    //return await sentMails.find({});\r\n    return await sentMails.find({}, {\r\n        '_id': 0, '__v': 0,\r\n    });\r\n}\r\n\r\nasync function getClicked() {\r\n    return await sentMails.find({clicked: true});\r\n}\r\n\r\nasync function getTrained() {\r\n    return await sentMails.find({training_completed: true});\r\n}\r\n\r\nasync function saveMail(mail) {\r\n    return await sentMails.findOneAndUpdate({\r\n        id: mail.id,\r\n    }, mail, {\r\n        upsert: true,\r\n    });\r\n}\r\n\r\nasync function setClicked(click) {\r\n    console.log(click.id)\r\n    const clicked = await sentMails.find({ id: click.id, clicked: false });\r\n    console.log(clicked);\r\n    console.log(\"Clicked length: \" + clicked.length);\r\n    if (clicked.length == 1) {\r\n        console.log(\"Changing\")\r\n        var curr = new Date().setSeconds(0, 0);\r\n        await sentMails.findOneAndUpdate({\r\n            id: click.id,\r\n        }, {\r\n            clicked: true,\r\n            clicked_date: curr,\r\n        }\r\n        );\r\n        return true;\r\n    } else {\r\n        console.log(\"No Change\");\r\n        return false;\r\n    } \r\n}\r\n\r\nasync function setTrained(click) {\r\n    const trained = await sentMails.find({\r\n        id: click.id,\r\n        training_completed: false });\r\n    console.log(trained);\r\n    console.log(\"trained length: \" + trained.length);\r\n    if (trained.length == 1) {\r\n        console.log(\"trained\");\r\n        var curr = new Date().setSeconds(0, 0);\r\n        await sentMails.findOneAndUpdate({\r\n            id: click.id,\r\n        }, {\r\n            training_completed: true,\r\n            training_date: curr,\r\n        });\r\n        return true;\r\n    } else {\r\n        console.log(\"No Change\");\r\n        return false;\r\n    }\r\n}\r\n\r\nasync function deleteAllMails() {\r\n    console.log(\"Deleting all mails\");\r\n    await sentMails.deleteMany({})\r\n        .then(console.log(\"All Mails deleted\"))\r\n    return true;\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    getAllMails, getClicked, getTrained,\r\n    saveMail, setClicked, setTrained,\r\n    deleteAllMails\r\n}","const mongoose = require('mongoose');\r\n\r\nconst sentMailsSchema = new mongoose.Schema(\r\n    {\r\n        \"id\": {\r\n            \"type\": \"String\"\r\n        },\r\n        \"sender_email\": {\r\n            \"type\": \"String\"\r\n        },\r\n        \"sender_name\": {\r\n            \"type\": \"String\"\r\n        },\r\n        \"from\": {\r\n            \"type\": \"String\"\r\n        },\r\n        \"recipient_email\": {\r\n            \"type\": \"String\"\r\n        },\r\n        \"sent_date\": {\r\n            \"type\": \"Date\"\r\n        },\r\n        \"subject\": {\r\n            \"type\": \"String\"\r\n        },\r\n        \"message\": {\r\n            \"type\": \"String\"\r\n        },\r\n        \"attachment\": {\r\n            \"type\": \"String\"\r\n        },\r\n        \"clicked\": {\r\n            \"type\": \"Boolean\",\r\n            \"default\": \"false\"\r\n        },\r\n        \"clicked_date\": {\r\n            \"type\": \"Date\"\r\n        },\r\n        \"training_completed\": {\r\n            \"type\": \"Boolean\",\r\n            \"default\": \"false\"\r\n        },\r\n        \"training_date\": {\r\n            \"type\": \"Date\"\r\n        },\r\n    }\r\n);\r\n\r\nmodule.exports = mongoose.model('SentMails', sentMailsSchema);","const Settings = require(\"./settings.mongo\");\r\n\r\nasync function getSettings(clientName) {\r\n    return await Settings.find({ poweredby: \"Apptriangle\", });\r\n}\r\n\r\nasync function updateSettings(settings) {\r\n    console.log(\"updating settigs:\", settings)\r\n    const updatedSettings = await Settings.findOneAndUpdate({ poweredby: \"Apptriangle\", },\r\n        {\r\n            smtp_setup: {\r\n                host: settings.host,\r\n                port: settings.port,\r\n                tls: settings.tls,\r\n                authentication: settings.authentication,\r\n                userName: settings.userName,\r\n                password: settings.password\r\n            }\r\n        });\r\n    return updatedSettings;\r\n}\r\n\r\nasync function updateClientName(name) {\r\n    const updatedName = await Settings.findOneAndUpdate({ poweredby: \"Apptriangle\" }, name);\r\n    return updatedName;\r\n}\r\n\r\nasync function updateSentCounter() {\r\n    const updatedName = await Settings.findOneAndUpdate({ poweredby: \"Apptriangle\" }, { $inc: { 'total_sent': 1 } });\r\n    return updatedName;\r\n}\r\n\r\nasync function updateClickedCounter() {\r\n    const updatedName = await Settings.findOneAndUpdate({ poweredby: \"Apptriangle\" }, { $inc: { 'total_clicked': 1 } });\r\n    return updatedName;\r\n}\r\nasync function updateTrainedCounter() {\r\n    const updatedName = await Settings.findOneAndUpdate({ poweredby: \"Apptriangle\" }, { $inc: { 'total_trained': 1 } });\r\n    return updatedName;\r\n}\r\n\r\nasync function resetCounter() {\r\n    console.log(\"Resetting Counter\")\r\n    await Settings.findOneAndUpdate({ poweredby: \"Apptriangle\", },\r\n        {\r\n            total_sent: 0,\r\n            total_clicked: 0,\r\n            total_trained: 0\r\n        })\r\n        .then(console.log(\"Counter Reset to 0\"));\r\n    return true;\r\n}\r\n\r\nmodule.exports = {\r\n    getSettings,\r\n    updateSettings, updateClientName,\r\n    updateSentCounter, updateClickedCounter, updateTrainedCounter,\r\n    resetCounter\r\n}","const mongoose = require('mongoose');\r\n\r\nconst settingsSchema = new mongoose.Schema(\r\n    {\r\n        \"clientName\": {\r\n            \"type\": \"String\"\r\n        },\r\n        \"smtp_setup\": {\r\n            \"host\": {\r\n                \"type\": \"String\"\r\n            },\r\n            \"port\": {\r\n                \"type\": \"Number\"\r\n            },\r\n            \"tls\": {\r\n                \"type\": \"Boolean\",\r\n                \"default\": \"false\"\r\n            },\r\n            \"authentication\": {\r\n                \"type\": \"Boolean\",\r\n                \"default\": \"false\"\r\n            },\r\n            \"userName\": {\r\n                \"type\": \"String\"\r\n            },\r\n            \"password\": {\r\n                \"type\": \"String\"\r\n            },\r\n        },\r\n        \"total_sent\": {\r\n            \"type\": \"Number\",\r\n            \"default\" : 0,\r\n        },\r\n        \"total_clicked\": {\r\n            \"type\": \"Number\",\r\n            \"default\": 0,\r\n        },\r\n        \"total_trained\": {\r\n            \"type\": \"Number\",\r\n            \"default\": 0,\r\n        },\r\n        \"poweredby\": {\r\n            \"type\": \"String\",\r\n            \"default\": \"Apptriangle\",\r\n        }\r\n    }\r\n);\r\n\r\nmodule.exports = mongoose.model('Settings', settingsSchema);","const express = require('express');\r\n\r\nconst settingsRouter = require('./settings/settings.router');\r\nconst sentMailsRouter = require('./sentMails/sentMails.router');\r\nconst adminRouter = express.Router();\r\n\r\nadminRouter.use('/settings', settingsRouter);\r\nadminRouter.use('/sentMails', sentMailsRouter);\r\n\r\n\r\nmodule.exports = adminRouter;","const express = require('express');\r\n\r\nconst adminRouter = require('./admin.router');\r\nconst landingPageRouter = require('./landingPage/landingPage.router');\r\n\r\nconst apiRouter = express.Router();\r\n\r\napiRouter.use('/admin', adminRouter);\r\napiRouter.use('/landingPage', landingPageRouter);\r\n\r\n\r\nconst multer = require('multer');\r\nconst { v4: uuidv4 } = require('uuid');\r\n\r\nconst storage = multer.diskStorage({\r\n    destination: function (req, file, cb) {\r\n        cb(null, 'images');\r\n    },\r\n    filename: function (req, file, cb) {\r\n        cb(null, uuidv4() + '-' + Date.now() + path.extname(file.originalname));\r\n    }\r\n});\r\n\r\nconst fileFilter = (req, file, cb) => {\r\n    const allowedFileTypes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n    if (allowedFileTypes.includes(file.mimetype)) {\r\n        cb(null, true);\r\n    } else {\r\n        cb(null, false);\r\n    }\r\n}\r\n\r\nlet upload = multer({ storage, fileFilter });\r\napiRouter.route('/add').post(upload.single('attachment'), (req, res) => {\r\n    console.log(\"files:\", req.file);\r\n    console.log(\"body files:\", req.body);\r\n    const name = req.body.name;\r\n    const from = req.body.from;\r\n    const attachment = req.files.attachment.name;\r\n\r\n    const newUserData = {\r\n        name,\r\n        from,\r\n        attachment\r\n    }\r\n\r\n    console.log(\"Data:\", newUserData)\r\n    res.status(200).json({ \"Msg\": \"File uploaded\" })\r\n});\r\n\r\n\r\nmodule.exports = apiRouter;","const { setClicked, setTrained } = require(\"../../models/sentMails.model\");\r\nconst { getSettings, updateClickedCounter, updateTrainedCounter } = require('../../models/settings.model');\r\n\r\nasync function httpGetClientName(req, res) {\r\n    console.log(req.body);\r\n    const settings = await getSettings(\"Apptriangle\");\r\n    return res.status(200).json({\r\n                    clientName: settings[0].clientName\r\n                 });\r\n\r\n};\r\n\r\nasync function httpSetClicked(req, res) {\r\n    console.log(req.body);\r\n    const updated = await setClicked(req.body);\r\n    console.log(\"Updated: \"+ updated)\r\n    if (updated) {\r\n        console.log(\"Changing Counter\")\r\n        await updateClickedCounter();\r\n        return res.status(200).json({ updated: true });\r\n    } else {\r\n        return res.status(200).json({ updated: false });\r\n    }\r\n}\r\n\r\nasync function httpSetTrained(req, res) {\r\n    console.log(req.body);\r\n    const updated = await setTrained(req.body);\r\n    console.log(\"Updated: \" + updated)\r\n    if (updated) {\r\n        console.log(\"Changing Counter\")\r\n        await updateTrainedCounter();\r\n        return res.status(200).json({ updated: true });\r\n    } else {\r\n        return res.status(200).json({ updated: false });\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    httpGetClientName, httpSetClicked, httpSetTrained\r\n}","const express = require('express');\r\nconst { httpGetClientName, httpSetClicked, httpSetTrained } = require('./landingPage.controller');\r\n\r\nconst landingPageRouter = express.Router();\r\n\r\nlandingPageRouter.get('/', httpGetClientName);\r\nlandingPageRouter.post('/', httpSetClicked);\r\nlandingPageRouter.post('/trained', httpSetTrained);\r\n\r\nmodule.exports = landingPageRouter;","const { getAllMails, getClicked, getTrained, saveMail, setClicked, setTrained } = require(\"../../models/sentMails.model\");\r\nconst { getSettings, updateSentCounter } = require('../../models/settings.model');\r\nconst { sendMail } = require(\"../../services/smtpserver\");\r\nconst nodeMailer = require(\"nodemailer\");\r\nconst { uploadAttachmentMiddleware, uploadFilesMiddleware } = require(\"../../middleware/upload\");\r\n\r\nconst router = require('express').Router();\r\nconst multer = require('multer');\r\nconst { v4: uuidv4 } = require('uuid');\r\nconst fs = require('fs');\r\nlet path = require('path');\r\nconst { parse } = require('csv-parse');\r\n\r\nasync function httpGetAllMails(req, res) {\r\n    return res.status(200).json(await getAllMails());\r\n}\r\n\r\nasync function httpGetClicked(req, res) {\r\n    return res.status(200).json(await getClicked());\r\n}\r\n\r\nasync function httpGetTrained(req, res) {\r\n    return res.status(200).json(await getTrained());\r\n}\r\n\r\nasync function httpSendMail(req, res) {\r\n\r\n    await uploadFilesMiddleware(req, res);\r\n\r\n    const mail = req.body;\r\n\r\n    const settings = await getSettings(\"Apptriangle\")\r\n    let transporter = await nodeMailer.createTransport({\r\n        host: settings[0].smtp_setup.host,\r\n        port: settings[0].smtp_setup.port,\r\n        secure: false,\r\n        auth: {\r\n            user: settings[0].smtp_setup.userName,\r\n            pass: settings[0].smtp_setup.password,\r\n        }\r\n    });\r\n\r\n    let recipients = []\r\n    async function getRecipients(){\r\n            if (mail.bulk == 'true' && req.files.csv != undefined) {\r\n            fs.createReadStream(req.files.csv[0].path)\r\n                .pipe(\r\n                    parse({\r\n                        columns: true,\r\n                        skip_empty_lines: true,\r\n                        bom: true,\r\n                        delimiter: \",\",\r\n                        ltrim: true,\r\n                    })\r\n                )\r\n                .on('data', function (row) {\r\n                    recipients.push(row['email']);\r\n                })\r\n                .on('error', function (error) {\r\n                    console.log(error.message);\r\n                })\r\n                .on('end', function () {\r\n                    console.log(recipients);\r\n                    sendMail();\r\n                });\r\n        } else {\r\n                recipients = mail.to.split(\",\");\r\n                sendMail();\r\n        }\r\n    }\r\n    await getRecipients();\r\n    async function sendMail() {\r\n        for (let i = 0; i < recipients.length; i++) {\r\n            console.log(\"Sending mail to:\", recipients[i]);\r\n            let id = Date.now();\r\n            let trackedMessage = mail.html.split('landingPage').join(`landingPage/${id}`);\r\n            console.log(trackedMessage);\r\n\r\n            let send = {\r\n                from: mail.name + \" <\" + mail.address + \">\",\r\n                to: recipients[i],\r\n                subject: mail.subject,\r\n                html: trackedMessage,\r\n            }\r\n\r\n            if (req.files.attachment != undefined) {\r\n                send.attachments = [\r\n                    {\r\n                        filename: req.files.attachment[0].originalname,\r\n                        path: req.files.attachment[0].path,\r\n                    }\r\n                ]\r\n            }\r\n\r\n            await transporter.sendMail(send);\r\n            await saveMail({\r\n                from: send.from,\r\n                recipient_email: send.to,\r\n                subject: send.subject,\r\n                message: trackedMessage,\r\n                sent_date: new Date(Date.now()),\r\n                id: id,\r\n                clicked: false,\r\n                traintraining_completed: false\r\n            });\r\n            await updateSentCounter();\r\n        }\r\n        return res.sendStatus(201);\r\n    }\r\n\r\n    \r\n}\r\n\r\nasync function httpSetClicked(req, res) {\r\n    const clicked = await setClicked(req.body.id);\r\n    return res.status(201).json(clicked);\r\n}\r\n\r\nasync function httpSetTrained(req, res) {\r\n    const trained = await setTrained(req.body.id);\r\n    return res.status(201).json(trained);\r\n}\r\n\r\nmodule.exports = {\r\n    httpGetAllMails, httpGetClicked, httpGetTrained, httpSendMail, httpSetClicked, httpSetTrained\r\n}","const express = require('express');\r\nconst { httpGetAllMails, httpGetClicked, httpGetTrained, httpSendMail, httpSetClicked, httpSetTrained } = require('./sentMails.controller');\r\n\r\nconst sentMailsRouter = express.Router();\r\n\r\nsentMailsRouter.get('/', httpGetAllMails);\r\nsentMailsRouter.get('/getClicked', httpGetClicked);\r\nsentMailsRouter.get('/getTrained', httpGetTrained);\r\nsentMailsRouter.post('/new', httpSendMail);\r\n\r\nmodule.exports = sentMailsRouter;","const { getSettings, updateSettings, updateClientName, resetCounter } = require(\"../../models/settings.model\");\r\nconst { deleteAllMails } = require(\"../../models/sentMails.model\");\r\nconst { createTransporter } = require(\"../../services/smtpserver\");\r\nconst nodeMailer = require(\"nodemailer\");\r\n\r\nasync function httpGetSettings(req, res) {\r\n    \r\n    const settings = await getSettings(\"Apptriangle\");\r\n    return res.status(200).json(settings[0]);\r\n}\r\n\r\nasync function httpUpdateSettings(req, res) {\r\n    console.log(\"trying new: \", req.body)\r\n    let transporter = await nodeMailer.createTransport(req.body);\r\n\r\n    transporter.verify(async function verify(error, success) {\r\n                            if (error) {\r\n                                console.log(error)\r\n                                console.log(\"err\");\r\n                                return res.status(400).json({ yo: 'error' });\r\n                            } else {\r\n                                console.log(\"success\");\r\n                                await updateSettings(req.body)\r\n                                return res.sendStatus(200);\r\n                            }\r\n    });\r\n}\r\n\r\nasync function httpUpdateClientName(req, res) {\r\n    console.log(\"new name:\", req.body);\r\n    return res.status(200).json(await updateClientName(req.body));\r\n}\r\n\r\nasync function httpResetMailbox(req, res) {\r\n    console.log(\"Resetting Mailbox:\")\r\n    const counter = await resetCounter();\r\n    const mails = await deleteAllMails();\r\n    if (counter && mails) {\r\n        return res.status(200).json({ reset: true });\r\n    } else {\r\n        return res.status(500).json({ reset: false });\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    httpGetSettings, httpUpdateSettings, httpUpdateClientName, httpResetMailbox\r\n}","const express = require('express');\r\nconst { httpGetSettings, httpUpdateSettings, httpUpdateClientName, httpResetMailbox } = require('./settings.controller');\r\n\r\nconst settingsRouter = express.Router();\r\n\r\nsettingsRouter.get('/', httpGetSettings);\r\nsettingsRouter.post('/', httpUpdateSettings);\r\nsettingsRouter.post('/updateLandingPage', httpUpdateClientName);\r\nsettingsRouter.post('/resetMailbox', httpResetMailbox);\r\n\r\nmodule.exports = settingsRouter;","const mongoose = require('mongoose');\r\nrequire('dotenv').config();\r\n\r\nconst MONGO_URL = process.env.MONGO_URL;\r\n\r\n\r\nmongoose.connection.once('open', () => {\r\n    console.log('Mongo DB Connection Ready');\r\n});\r\n\r\nmongoose.connection.on('error', (err) => {\r\n    console.error(err);\r\n});\r\n\r\n\r\nasync function mongoConnect() {\r\n    console.log(\"COnnecting\");\r\n    await mongoose.connect(MONGO_URL);\r\n    console.log(\"Connected\");\r\n};\r\n\r\nasync function mongoDisconnect() {\r\n    await mongoose.disconnect();\r\n}\r\n\r\nmodule.exports = {\r\n    mongoConnect,\r\n    mongoDisconnect\r\n}","const { getSettings } = require('../models/settings.model');\r\nconst nodeMailer = require(\"nodemailer\");\r\nconst { Error } = require(\"mongoose\");\r\n\r\nasync function createTransporter(setup) {\r\n    let transporter = await nodeMailer.createTransport(setup)\r\n\r\n    const res = transporter.verify(function (error, success) {\r\n                if (error) {\r\n                    console.log(error)\r\n                    return false\r\n                } else {\r\n                    console.log(transporter)\r\n                    console.log(\"Success\");\r\n                    return transporter\r\n                }\r\n    })\r\n    return res;\r\n}\r\nasync function sendMail(mail) {\r\n    const settings = await getSettings(\"Apptriangle\")\r\n    console.log(\"Settings:\", settings[0].smtp_setup);\r\n    const transporter = await nodeMailer.createTransport(settings[0].smtp_setup);\r\n    transporter.verify(function verify(error, success) {\r\n        if (error) {\r\n            console.log(error)\r\n            console.log(\"err\");\r\n        } else {\r\n            console.log(\"success\");\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports = {\r\n    createTransporter, sendMail\r\n}\r\n","module.exports = require(\"cors\");","module.exports = require(\"csv-parse\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"mongoose\");","module.exports = require(\"morgan\");","module.exports = require(\"multer\");","module.exports = require(\"nodemailer\");","module.exports = require(\"uuid\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"path\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","require('dotenv').config();\r\nconst PORT = process.env.PORT || 8000;\r\nglobal.__basedir = __dirname;\r\n\r\nconst http = require('http');\r\n\r\nconst app = require('./app');\r\nconst { mongoConnect } = require('./services/mongo');\r\n\r\nconst server = http.createServer(app);\r\nconst nodeMailer = require(\"nodemailer\")\r\n\r\n\r\n\r\nasync function startServer() {\r\n\r\n    await mongoConnect();\r\n\r\n    server.listen(PORT, () => {\r\n        console.log(`Listening on port ${PORT}...`)\r\n    });\r\n};\r\n\r\nstartServer();"],"names":["express","cors","path","apiRouter","app","use","json","urlencoded","extended","static","join","__dirname","get","req","res","sendFile","module","exports","util","multer","v4","uuidv4","storage","diskStorage","destination","file","cb","__basedir","filename","console","log","originalname","Date","now","extname","uploadAttachment","single","uploadFiles","fields","name","maxCount","uploadAttachmentMiddleware","promisify","uploadFilesMiddleware","sentMails","getAllMails","async","find","getClicked","clicked","getTrained","training_completed","saveMail","mail","findOneAndUpdate","id","upsert","setClicked","click","length","curr","setSeconds","clicked_date","setTrained","trained","training_date","deleteAllMails","deleteMany","then","mongoose","sentMailsSchema","Schema","model","Settings","getSettings","clientName","poweredby","updateSettings","settings","smtp_setup","host","port","tls","authentication","userName","password","updateClientName","updateSentCounter","$inc","updateClickedCounter","updateTrainedCounter","resetCounter","total_sent","total_clicked","total_trained","settingsSchema","settingsRouter","sentMailsRouter","adminRouter","Router","landingPageRouter","upload","fileFilter","includes","mimetype","route","post","body","newUserData","from","attachment","files","status","httpGetClientName","httpSetClicked","updated","httpSetTrained","sendMail","nodeMailer","fs","parse","httpGetAllMails","httpGetClicked","httpGetTrained","httpSendMail","transporter","createTransport","secure","auth","user","pass","recipients","i","trackedMessage","html","split","send","address","to","subject","undefined","attachments","recipient_email","message","sent_date","traintraining_completed","sendStatus","bulk","csv","createReadStream","pipe","columns","skip_empty_lines","bom","delimiter","ltrim","on","row","push","error","getRecipients","createTransporter","httpGetSettings","httpUpdateSettings","verify","success","yo","httpUpdateClientName","httpResetMailbox","counter","mails","reset","MONGO_URL","process","env","connection","once","err","mongoConnect","connect","mongoDisconnect","disconnect","Error","setup","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","PORT","global","http","server","createServer","listen","startServer"],"sourceRoot":""}